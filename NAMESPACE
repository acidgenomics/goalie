# Generated by roxygen2: do not edit by hand

export("%>%")
export(areSamplesUnique)
export(assert)
export(assertAllAreAtomic)
export(assertAllAreNonExisting)
export(assertAllAreValidNames)
export(assertAlpha)
export(assertAnyClass)
export(assertAreGeneAnnotations)
export(assertAreNonExisting)
export(assertAreTranscriptAnnotations)
export(assertAreURLs)
export(assertAreUniqueGeneNames)
export(assertHasColnames)
export(assertHasRownames)
export(assertHasUniqueCols)
export(assertHasValidDimnames)
export(assertHasValidNames)
export(assertHeaderLevel)
export(assertIdentical)
export(assertIsAHeaderLevel)
export(assertIsAStringOrNULL)
export(assertIsAnnotable)
export(assertIsCharacterOrNULL)
export(assertIsDataFrameOrNULL)
export(assertIsGFF)
export(assertIsGene2symbol)
export(assertIsTx2gene)
export(assertURL)
export(assert_all_are_atomic)
export(assert_alpha)
export(assert_any_class)
export(assert_are_non_existing)
export(assert_are_unique_gene_names)
export(assert_are_urls)
export(assert_has_colnames)
export(assert_has_rownames)
export(assert_has_unique_cols)
export(assert_has_valid_dimnames)
export(assert_has_valid_names)
export(assert_header_level)
export(assert_identical)
export(assert_that)
export(assert_url)
export(checkAllAreAtomic)
export(checkAlpha)
export(checkAnyClass)
export(checkAreNonExisting)
export(checkAreUniqueGeneNames)
export(checkHasColnames)
export(checkHasRownames)
export(checkHasUniqueCols)
export(checkHasValidDimnames)
export(checkHasValidNames)
export(checkHeaderLevel)
export(checkIdentical)
export(checkURL)
export(checkURLs)
export(check_all_are_atomic)
export(check_alpha)
export(check_any_class)
export(check_are_non_existing)
export(check_are_unique_gene_names)
export(check_has_colnames)
export(check_has_rownames)
export(check_has_unique_cols)
export(check_has_valid_dimnames)
export(check_has_valid_names)
export(check_header_level)
export(check_identical)
export(check_url)
export(check_urls)
export(expect_all_are_atomic)
export(expect_alpha)
export(expect_any_class)
export(expect_are_non_existing)
export(expect_are_urls)
export(expect_has_colnames)
export(expect_has_rownames)
export(expect_has_unique_cols)
export(expect_has_valid_dimnames)
export(expect_has_valid_names)
export(expect_header_level)
export(expect_url)
export(hasName)
export(hasNames)
export(has_name)
export(has_names)
export(isAny)
export(isIntegerish)
export(isScalarIntegerish)
export(is_any)
export(is_integerish)
export(is_scalar_integerish)
export(testAllAreAtomic)
export(testAlpha)
export(testAnyClass)
export(testAreNonExisting)
export(testAreUniqueGeneNames)
export(testHasColnames)
export(testHasRownames)
export(testHasUniqueCols)
export(testHasValidDimnames)
export(testHasValidNames)
export(testHeaderLevel)
export(testIdentical)
export(testURL)
export(testURLs)
export(test_all_are_atomic)
export(test_alpha)
export(test_any_class)
export(test_are_non_existing)
export(test_are_unique_gene_names)
export(test_has_colnames)
export(test_has_rownames)
export(test_has_unique_cols)
export(test_has_valid_dimnames)
export(test_has_valid_names)
export(test_header_level)
export(test_identical)
export(test_url)
export(test_urls)
export(validNames)
export(validate)
export(validateClasses)
export(validate_that)
importFrom(BiocGenerics,duplicated)
importFrom(BiocGenerics,rowSums)
importFrom(R.utils,isDirectory)
importFrom(R.utils,isFile)
importFrom(assertive.base,assert_all_are_not_na)
importFrom(assertive.base,assert_all_are_true)
importFrom(assertive.base,assert_any_are_true)
importFrom(assertive.base,assert_are_identical)
importFrom(assertive.base,assert_is_identical_to_na)
importFrom(assertive.base,is2)
importFrom(assertive.base,is_not_na)
importFrom(assertive.code,assert_all_are_existing)
importFrom(assertive.code,is_existing)
importFrom(assertive.data,assert_all_are_hex_colors)
importFrom(assertive.data,is_hex_color)
importFrom(assertive.files,assert_all_are_dirs)
importFrom(assertive.files,assert_all_are_existing_files)
importFrom(assertive.files,assert_all_are_non_empty_files)
importFrom(assertive.numbers,assert_all_are_greater_than)
importFrom(assertive.numbers,assert_all_are_greater_than_or_equal_to)
importFrom(assertive.numbers,assert_all_are_in_closed_range)
importFrom(assertive.numbers,assert_all_are_in_open_range)
importFrom(assertive.numbers,assert_all_are_in_range)
importFrom(assertive.numbers,assert_all_are_non_negative)
importFrom(assertive.numbers,assert_all_are_positive)
importFrom(assertive.numbers,is_positive)
importFrom(assertive.properties,assert_are_same_length)
importFrom(assertive.properties,assert_has_colnames)
importFrom(assertive.properties,assert_has_cols)
importFrom(assertive.properties,assert_has_dimnames)
importFrom(assertive.properties,assert_has_dims)
importFrom(assertive.properties,assert_has_names)
importFrom(assertive.properties,assert_has_no_duplicates)
importFrom(assertive.properties,assert_has_rows)
importFrom(assertive.properties,assert_is_atomic)
importFrom(assertive.properties,assert_is_empty)
importFrom(assertive.properties,assert_is_non_empty)
importFrom(assertive.properties,assert_is_not_null)
importFrom(assertive.properties,assert_is_null)
importFrom(assertive.properties,assert_is_of_length)
importFrom(assertive.properties,assert_is_scalar)
importFrom(assertive.properties,assert_is_vector)
importFrom(assertive.properties,has_colnames)
importFrom(assertive.properties,has_dimnames)
importFrom(assertive.properties,has_dims)
importFrom(assertive.properties,has_names)
importFrom(assertive.properties,has_rows)
importFrom(assertive.properties,is_scalar)
importFrom(assertive.sets,assert_are_disjoint_sets)
importFrom(assertive.sets,assert_are_intersecting_sets)
importFrom(assertive.sets,assert_are_set_equal)
importFrom(assertive.sets,assert_is_subset)
importFrom(assertive.sets,is_subset)
importFrom(assertive.strings,assert_all_are_matching_regex)
importFrom(assertive.strings,assert_all_are_non_empty_character)
importFrom(assertive.strings,assert_all_are_non_missing_nor_empty_character)
importFrom(assertive.strings,assert_any_are_matching_regex)
importFrom(assertive.types,assert_is_a_number)
importFrom(assertive.types,assert_is_a_string)
importFrom(assertive.types,assert_is_all_of)
importFrom(assertive.types,assert_is_an_integer)
importFrom(assertive.types,assert_is_any_of)
importFrom(assertive.types,assert_is_call)
importFrom(assertive.types,assert_is_character)
importFrom(assertive.types,assert_is_data.frame)
importFrom(assertive.types,assert_is_environment)
importFrom(assertive.types,assert_is_factor)
importFrom(assertive.types,assert_is_function)
importFrom(assertive.types,assert_is_integer)
importFrom(assertive.types,assert_is_list)
importFrom(assertive.types,assert_is_logical)
importFrom(assertive.types,assert_is_matrix)
importFrom(assertive.types,assert_is_name)
importFrom(assertive.types,assert_is_numeric)
importFrom(assertive.types,assert_is_symbol)
importFrom(assertive.types,assert_is_tbl_df)
importFrom(assertive.types,is_a_number)
importFrom(assertive.types,is_a_string)
importFrom(assertthat,"on_failure<-")
importFrom(assertthat,assert_that)
importFrom(assertthat,validate_that)
importFrom(checkmate,assert)
importFrom(checkmate,assertClass)
importFrom(checkmate,assertLogical)
importFrom(checkmate,assertNames)
importFrom(checkmate,makeAssertion)
importFrom(checkmate,makeAssertionFunction)
importFrom(checkmate,makeExpectation)
importFrom(checkmate,makeExpectationFunction)
importFrom(checkmate,makeTest)
importFrom(checkmate,makeTestFunction)
importFrom(checkmate,testClass)
importFrom(checkmate,testFlag)
importFrom(checkmate,testScalar)
importFrom(checkmate,testString)
importFrom(checkmate,vname)
importFrom(magrittr,"%>%")
importFrom(methods,as)
importFrom(methods,is)
importFrom(methods,setGeneric)
importFrom(methods,setMethod)
importFrom(methods,signature)
importFrom(rlang,has_name)
importFrom(rlang,is_integerish)
importFrom(rlang,is_scalar_double)
importFrom(rlang,is_scalar_integerish)
importFrom(rlang,is_string)
importFrom(utils,globalVariables)
