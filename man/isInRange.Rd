% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/check-vector-isInRange.R
\name{isInRange}
\alias{isInRange}
\alias{isInClosedRange}
\alias{isInOpenRange}
\alias{isInLeftOpenRange}
\alias{isInRightOpenRange}
\alias{isNegative}
\alias{isPositive}
\alias{isNonNegative}
\alias{isNonPositive}
\alias{isPercentage}
\alias{isProportion}
\alias{allAreInRange}
\alias{allAreInClosedRange}
\title{Is the input in range?}
\usage{
isInRange(x, lower = -Inf, upper = Inf, closed = c(TRUE, TRUE),
  .xname = getNameInParent(x))

isInClosedRange(x, lower = -Inf, upper = Inf,
  .xname = getNameInParent(x))

isInOpenRange(x, lower = -Inf, upper = Inf,
  .xname = getNameInParent(x))

isInLeftOpenRange(x, lower = -Inf, upper = Inf,
  .xname = getNameInParent(x))

isInRightOpenRange(x, lower = -Inf, upper = Inf,
  .xname = getNameInParent(x))

isNegative(x, .xname = getNameInParent(x))

isPositive(x, .xname = getNameInParent(x))

isNonNegative(x, .xname = getNameInParent(x))

isNonPositive(x, .xname = getNameInParent(x))

isPercentage(x, .xname = getNameInParent(x))

isProportion(x, .xname = getNameInParent(x))

allAreInRange(x, lower = -Inf, upper = Inf, closed = c(TRUE, TRUE),
  .xname = getNameInParent(x))

allAreInClosedRange(x, lower = -Inf, upper = Inf,
  .xname = getNameInParent(x))
}
\arguments{
\item{x}{Object.}

\item{lower}{\code{numeric(1)}.
Lower boundary.}

\item{upper}{\code{numeric(1)}.
Upper boundary.}

\item{closed}{\code{logical(2)}.
Should the lower (1) and upper (2) bounaries be closed?}

\item{.xname}{\emph{Not intended to be used directly.}}
}
\value{
\code{TRUE} on success;
\code{FALSE} on failure, with \code{cause} \link[base:attributes]{attribute} set.
}
\description{
Is the input in range?
}
\section{Functions}{
\itemize{
\item \code{isInRange}: Vectorized.

\item \code{isInClosedRange}: Vectorized.

\item \code{isInOpenRange}: Vectorized.

\item \code{isInLeftOpenRange}: Vectorized.

\item \code{isInRightOpenRange}: Vectorized.

\item \code{isNegative}: Vectorized.

\item \code{isPositive}: Vectorized.

\item \code{isNonNegative}: Vectorized.

\item \code{isNonPositive}: Vectorized.

\item \code{isPercentage}: Vectorized.

\item \code{isProportion}: Vectorized.

\item \code{allAreInRange}: Scalar.

\item \code{allAreInClosedRange}: Scalar.
}}

\section{Intervals}{

\itemize{
\item Closed: Includes all its limit points, and is denoted with square brackets.
For example, \code{[0,1]} means greater than or equal to 0 and less than or
equal to 1.
\item Open: Does not include its endpoints, and is indicated with parentheses.
For example, \code{(0,1)} means greater than 0 and less than 1.
}
}

\examples{
## Pass ====
isInRange(0, lower = 0, upper = 1)
isInRange(1, lower = 0, upper = 1)
isInClosedRange(1, lower = 0, upper = 1)

isInOpenRange(0.5, lower = 0, upper = 1)
isInLeftOpenRange(1, lower = 0, upper = 1)
isInRightOpenRange(0, lower = 0, upper = 1)

isNegative(c(-2, -1))
isPositive(c(1, 2))

isNonNegative(c(0, 1))
isNonPositive(c(-1, 0))

isPercentage(c(0, 25, 50, 100))
isProportion(c(0, 0.01, 0.1, 1))

## Fail ====
isInRange(c(2, 3), lower = 0, upper = 1)
isInClosedRange(c(2, 3), lower = 0, upper = 1)

isInOpenRange(c(1, 2), lower = 0, upper = 1)
isInLeftOpenRange(0, lower = 0)
isInRightOpenRange(1, upper = 1)

isPositive(-1)
isNegative(1)

isPercentage(110)
isProportion(1.1)
}
\seealso{
\itemize{
\item \code{assertive.numbers::is_in_range()}.
\item \code{assertive.numbers::is_in_closed_range()}.
\item \code{assertive.numbers::is_in_open_range()}.
\item \code{assertive.numbers::is_in_left_open_range()}.
\item \code{assertive.numbers::is_in_right_open_range()}.
\item \code{assertive.numbers::is_negative()}.
\item \code{assertive.numbers::is_positive()}.
\item \code{assertive.numbers::is_non_negative()}.
\item \code{assertive.numbers::is_non_positive()}.
\item \code{assertive.numbers::is_percentage()}.
\item \code{assertive.numbers::is_proportion()}.
}
}
