% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/areUniqueGeneNames.R
\name{areUniqueGeneNames}
\alias{areUniqueGeneNames}
\alias{are_unique_gene_names}
\alias{assertAreUniqueGeneNames}
\alias{assert_are_unique_gene_names}
\title{Does the Object Have Unique Gene Names?}
\usage{
areUniqueGeneNames(x, genes)

are_unique_gene_names(x, genes)

assertAreUniqueGeneNames(x, genes, .var.name = vname(x), add = NULL)

assert_are_unique_gene_names(x, genes, .var.name = vname(x),
  add = NULL)
}
\arguments{
\item{x}{Object.}

\item{genes}{\code{character}. Genes.}

\item{.var.name}{\code{string}. Name of the checked object to print in assertions.}

\item{add}{\code{AssertCollection}. Extra information to be included in the
message for the testthat reporter. See \code{testthat::expect_that()}.}
}
\value{
\itemize{
\item \code{boolean flag} for \code{are/has/is*()} functions.
\item Stop on error for \code{assert*()} functions
(see \code{stop()} or \code{stopifnot()} for details).
}
}
\description{
This assert check determines if a user-defined gene name query is using only
unique (non-amgibuous) symbols. It is designed to be used for gene plotting
particularly when performing single-cell RNA-seq marker analysis.
}
\examples{
x <- SummarizedExperiment::SummarizedExperiment(
    assays = matrix(
        data = seq_len(16L),
        nrow = 4L,
        ncol = 4L,
        dimnames = list(
            paste0("gene", seq_len(4L)),
            paste0("sample", seq_len(4L))
        )
    ),
    rowData = S4Vectors::DataFrame(
        geneID = paste0("ENSG0000000000", seq_len(4L)),
        geneName = paste0("SYMBOL", seq_len(4L))
    )
)
genes <- SummarizedExperiment::rowData(x)$geneName
areUniqueGeneNames(x = x, genes = genes)
}
\seealso{
\itemize{
\item \code{checkmate::makeAssertionFunction()}.
}
}
