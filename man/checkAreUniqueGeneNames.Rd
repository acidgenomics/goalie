% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/goalie-checkAreUniqueGeneNames.R
\name{checkAreUniqueGeneNames}
\alias{checkAreUniqueGeneNames}
\alias{areUniqueGeneNames}
\alias{are_unique_gene_names}
\alias{check_are_unique_gene_names}
\alias{testAreUniqueGeneNames}
\alias{test_are_unique_gene_names}
\alias{assertAreUniqueGeneNames}
\alias{assert_are_unique_gene_names}
\alias{expect_are_unique_gene_names}
\title{Are the Requested Gene Names Duplicated in the Corresponding Object?}
\usage{
checkAreUniqueGeneNames(x, genes)

check_are_unique_gene_names(x, genes)

testAreUniqueGeneNames(x, genes)

test_are_unique_gene_names(x, genes)

assertAreUniqueGeneNames(x, genes, .var.name = checkmate::vname(x),
  add = NULL)

assert_are_unique_gene_names(x, genes, .var.name = checkmate::vname(x),
  add = NULL)

expect_are_unique_gene_names(x, genes, info = NULL, label = vname(x))
}
\arguments{
\item{x}{Object.}

\item{genes}{\code{character}. Genes.}

\item{.var.name}{\code{character(1)}. Name of the checked object to print in
assertions.}

\item{add}{\code{AssertCollection}. Extra information to be included in the
message for the testthat reporter. See \code{testthat::expect_that()}.}

\item{info}{\code{character}. Extra information to be included in the message for
the testthat reporter. See \code{testthat::expect_that()}.}

\item{label}{\code{character(1)}. Name of the checked object to print in messages.}
}
\value{
\itemize{
\item \code{boolean flag} for \code{are/has/is*()} functions.
\item Stop on error for \code{assert*()} functions
(see \code{stop()} or \code{stopifnot()} for details).
}
}
\description{
This assert check determines if a user-defined gene name query is using only
unique (non-amgibuous) symbols. It is designed to be used for gene plotting
particularly when performing single-cell RNA-seq marker analysis.
}
\examples{
x <- SummarizedExperiment::SummarizedExperiment(
    assays = matrix(
        data = seq_len(16L),
        nrow = 4L,
        ncol = 4L,
        dimnames = list(
            paste0("gene", seq_len(4L)),
            paste0("sample", seq_len(4L))
        )
    ),
    rowData = S4Vectors::DataFrame(
        geneID = paste0("ENSG0000000000", seq_len(4L)),
        geneName = paste0("SYMBOL", seq_len(4L))
    )
)
genes <- SummarizedExperiment::rowData(x)$geneName

## Pass ====
checkAreUniqueGeneNames(x = x, genes = genes)
}
